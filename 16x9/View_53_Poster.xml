<?xml version="1.0" encoding="UTF-8"?>
<!-- Foundation -->
<includes>
	<include name="53Content">
		<height>1080</height>
		<visible>Container.Content(musicvideos) | Container.Content(movies) | Container.Content(tvshows) | Container.Content(sets) | Container.Content(seasons) | SubString(Container.FolderPath,plugin://,left) | Container.Content(plugins) | Container.Content(addons)</visible>
		<posy>96</posy>
		<posx>-190</posx>
		<width>2300</width>
		<onup condition="!Skin.HasSetting(global.kioskmode)">9000</onup>
		<ondown>60</ondown>
		<onleft>53</onleft>
		<onright>53</onright>
		<focusposition>1</focusposition>
		<preloaditems>0</preloaditems>
		<pagecontrol>60</pagecontrol>
		<orientation>horizontal</orientation>
		<viewtype label="538">list</viewtype>
		<scrolltime tween="quadratic">400</scrolltime>
		<itemlayout width="270">
			<control type="group">
				<animation effect="Conditional" condition="true">
					<effect type="zoom" end="60" time="0" center="213,452" />
				</animation>
				<control type="image">
					<top>PosterH</top>
					<width>PosterW</width>
					<height>PosterH</height>
					<fadetime>100</fadetime>
					<aspectratio align="center" aligny="top" scalediffuse="false">keep</aspectratio>
					<texture flipy="true" diffuse="diffuse/listposter-ref.png" background="true">$VAR[PosterImage]</texture>
					<visible>Skin.HasSetting(show.reflections)</visible>
				</control>
				<control type="image">
					<centertop>PosterH</centertop>
					<width>PosterW</width>
					<height>48</height>
					<aspectratio aligny="bottom">stretch</aspectratio>
					<texture>diffuse/shadowspot.png</texture>
				</control>
				<control type="image">
					<width>PosterW</width>
					<height>PosterH</height>
					<fadetime>100</fadetime>
					<aspectratio align="center" aligny="bottom" scalediffuse="false">keep</aspectratio>
					<texture diffuse="diffuse/listposter.png" background="true">$VAR[PosterImage]</texture>
				</control>
				<control type="group">
					<visible>!stringcompare(ListItem.Label,..)</visible>
					<control type="image">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
						<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
					</control>
					<control type="image">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture>$VAR[PosterPercentWatched]</texture>
					</control>
					<control type="label">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
				</control>
			</control>
		</itemlayout>
		<focusedlayout width="300">
			<control type="group">
				<posy>120</posy>
				<animation condition="Container(53).OnNext | Container(53).OnPrevious" effect="zoom" start="60" end="100" delay="0" time="350" tween="sine" easing="out" center="213,276">Focus</animation>
				<animation condition="Container(53).OnNext | Container(53).OnPrevious" effect="zoom" start="100" end="60" delay="0" time="250" tween="sine" easing="out" center="213,276">UnFocus</animation>
				<control type="button">
					<texturefocus>-</texturefocus>
					<texturenofocus>-</texturenofocus>
					<onfocus condition="Container.Content(movies)">ClearProperty(TVShowID,home)</onfocus>
					<onfocus condition="Container.Content(tvshows)">SetProperty(TVShowID,$INFO[ListItem.DBID],home)</onfocus>
				</control>
				<control type="image">
					<top>PosterH</top>
					<width>PosterW</width>
					<height>PosterH</height>
					<fadetime>100</fadetime>
					<aspectratio align="center" aligny="top" scalediffuse="false">keep</aspectratio>
					<texture flipy="true" diffuse="diffuse/listposter-ref.png" background="true">$VAR[PosterImage]</texture>
					<visible>Skin.HasSetting(show.reflections)</visible>
				</control>
				<control type="image">
					<centertop>PosterH</centertop>
					<width>PosterW</width>
					<height>48</height>
					<aspectratio aligny="bottom">stretch</aspectratio>
					<texture>diffuse/shadowspot.png</texture>
				</control>
				<control type="image">
					<width>PosterW</width>
					<height>PosterH</height>
					<fadetime>100</fadetime>
					<aspectratio align="center" aligny="bottom" scalediffuse="false">keep</aspectratio>
					<texture diffuse="diffuse/listposter.png" background="true">$VAR[PosterImage]</texture>
				</control>
				<control type="group">
					<visible>!stringcompare(ListItem.Label,..)</visible>
					<control type="image">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
						<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
					</control>
					<control type="image">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture>$VAR[PosterPercentWatched]</texture>
					</control>
					<control type="label">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<left>379</left>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
				</control>
			</control>
		</focusedlayout>
	</include>
	<include name="53Wrap">
		<control type="wraplist" id="53">
			<include>53Content</include>
		</control>
	</include>
	<include name="53Fixed">
		<control type="fixedlist" id="53">
			<include>53Content</include>
		</control>
	</include>
	<include name="View_53_Poster">
		<description>List View (id=53)</description>
		<control type="group">
			<include>Animation.Common</include>
			<visible>Control.IsVisible(53)</visible>
			<visible>!Window.IsVisible(DialogVideoInfo.xml) + !Window.IsVisible(DialogAlbumInfo.xml)</visible>
			<include condition="!Skin.HasSetting(53poster.nowrap)">53Wrap</include>
			<include condition="Skin.HasSetting(53poster.nowrap)">53Fixed</include>
			<control type="group">
				<animation effect="fade" condition="!Control.HasFocus(60)" time="200" start="100" end="0">Conditional</animation>
				<include>Furniture_Scrollbar_Horizontal</include>
			</control>
			<control type="grouplist">
				<left>540</left>
				<right>SidePad</right>
				<top>690</top>
				<orientation>vertical</orientation>
				<visible>![Container(53).OnNext | Container(53).OnPrevious]</visible>
				<animation effect="fade" start="0" end="100" delay="450" time="250" reversible="false">Visible</animation>
				<control type="label">
					<font>MediumSmallBold</font>
					<label>$INFO[ListItem.Label]</label>
					<textcolor>Dark1</textcolor>
					<height>35</height>
					<aligny>top</aligny>
				</control>
				<control type="label">
					<font>Small</font>
					<label>$INFO[ListItem.Genre]</label>
					<textcolor>Dark1</textcolor>
					<height>42</height>
					<aligny>top</aligny>
				</control>
				<control type="textbox">
					<font>MediumSmall</font>
					<label>$VAR[LabelPlotBox]</label>
					<textcolor>Dark2</textcolor>
					<height>164</height>
					<align>justify</align>
				</control>
			</control>
		</control>
	</include>
</includes>